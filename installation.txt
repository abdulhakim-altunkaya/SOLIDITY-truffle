TRUFFLE 
	Compilation
	Deployment: Ganache, an isolated local development blockchain
	Testing: Mocha

INSTALLATION: 
1) Make sure you have node.js installed on your computer.
2) open terminal, and doesn’t matter where you are because we will download truffle globally: “npm install -g truffle”
3) Then you can check if you installed truffle: “truffle version”

23) DO THIS BEFORE STEP 4:  on CMD, download HDWalletProvider: npm install @truffle/hdwallet-provider 
You need to download it inside the project folder.. 
HDWalletProvider allows to sign transactions on public and test nets.

4) Then to create a truffle project, go to any place you like to place your project folder and type: “truffle init”

5) 
Contracts folder: will contain our contracts
Migrations folder: will contain a Node.js file that will explain truffle how to deploy smart contract to the blockchain.
Test folder: will contain test files to test our smart contracts. The test files can be written in Node.js or in Solidity. 
Truffle-config.js: in this file we define deployment network for deploying smart contract. This file will allow us to make custom configuration such as which solidity version we would like to use or which network we would like to deploy our smart contract. 

6) Create your smart contracts inside the Contracts folder.

7) Solidity version that you are using should be compatible with what is written in truffle-config.js file.

Go to truffle-config.js file, go down to "compilers" and then check the "version".

8) After finishing your contract, you can compile your contract. At the root of the project on CMD, type:
*****"truffle compile"******
This command will compile the smart contracts inside the "contracts" folder.
And it will also create a "build" folder.

"Artifacts written to C:\...\project1\build\contracts" this is an important message.
"solc: 0.8.13+commit..." this is the version of solidity that is used for the compilation. 

9) Inside the build folder, go to JSON file of your smart contract. 3 keys are important there:
First key: "abi" - this part helps our frontend to interact with our smart contract.
Second key: "compile" - shows us which version is used to compile our smart contract.
Third key: "networks" - this will be empty now. But after we deploy it will change.

10) Make sure that your contracts pragma statements are the same solidity version. 

11) Once you deploy your smart contract, you cannot modify it. Thats why it is important
that you fix all bugs by testing before. Thats why test folder is important. To create a 
test file:
-create a .js file with the same name of your smart contract file.
-use "artifact" to reach your smart contract.
- use "it" and "assert" syntax of Mocha to make a test.
- Then test it: ****"truffle test"********

DEPLOYING SMART CONTRACTS 
12) Now we can deploy our contract to the Ganache Local Development Blockchain.

13) We should create a migrations file. Go to migrations folder, and create a migrations file.
This file should start with 2. Because truffle will execute them in order. Name:  2_deploy_contracts.js 
For basic content, you can copy paste from 1_initial_migrations.js
In place of "migrations", copy paste your smart contract file name.

14) If you have any arguments for the constructor, you can pass them inside deployer function. Such as:
deployer.deploy(SimpleStorage, "asdf", "fwefwef")

15) Once we finish that, we can type: *******"truffle develop"******* it will start a ganache local development blockchain 
-Accounts: these 10 accounts have 10 ethers inside each
-Private keys: Above accounts private keys
-Mnemonics: the keys used to create above accounts(? what does this mean?)

16) the prompt that appears is connected to this blockchain. Here in prompt you can type: 
*****"migrate --reset"**** and this command will deploy my contracts.

PUBLIC TESTNET
17) We can also deploy our contract on a public test net. For that we will need some
fake ethers from a faucet. 

18) Copy a contract address (after step 15, you will have 10 accounts in your CMD. Choose any of them)

19) Go to Binance Smart Chain TestNet faucet and copy-paste the address

20) Then go to "Binance Smart Chain TestNet Explorer" and copy-paste the address, just see if address has BNB

21) Then go to CMD and copy the private key for that address

22) Then exit the CMD with ctrl+c 



24) Then go to truffle-config.js  file and add these code to the beginning:
const HDWalletProvider = require("@truffle/hdwallet-provider");
const privateKeys = ["0x...private keys...."]
Dont forget to copy paste your private keys above.

25) then head down networks section and copy paste these parts inside it:

    eth: {
      provider: () => new HDWalletProvider(
        privateKeys,
        'ETH_NODE_URL'
      ),
      network_id: 1,
      skipDryRun: true
    },

    ethTestnet: {
      provider: () => new HDWalletProvider(
        privateKeys,
        'ETH_NODE_URL'
      ),
      network_id: 5,
      skipDryRun: true
    },

    bsc: {
      provider: () => new HDWalletProvider(
        privateKeys,
        'https://bsc-dataseed.binance.org/'
      ),
      network_id: 56,
      skipDryRun: true
    },

    bscTestnet: {
      provider: () => new HDWalletProvider(
        privateKeys,
        'https://data-seed-prebsc-1-s1.binance.org:8545/'
      ),
      network_id: 97,
      skipDryRun: true
    }

26)But of course, we will not need all of the networks up. We will just need bscTestnet.
open cmd and copy paste: truffle migrate --reset --network bscTestnet

27) then copy transaction hash, and go to BSC Scan for Testnet, paste it

28) Now we can interact with the smart contract by connecting truffle console to the public testnet by typing in CMD:
truffle console --network bscTestnet
Then give following answers to the prompt
(bscTestnet) storage = await SimpleStorage.deployed() // get a pointer to our deployed smart contract
(bscTestnet) storage.address // This is the contract address of SimpleStorage.sol after we deployed it to BSC Testnet
(bscTestnet) await storage.updateData(10) //We will call updateData function to make a transaction.
Then it will print a transaction receipt.
copy the transaction hash, then go to BSC Scan, paste it to see more info regarding transaction.

Now we can read the data (from the transaction?)
(bscTestnet) data = await storage.readData()
(bscTestnet) data.toString()

29) You can do step 28 also for truffle develop